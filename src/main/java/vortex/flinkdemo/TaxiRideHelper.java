package vortex.flinkdemo;


/**
* vortex/flinkdemo/TaxiRideHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/tmcclean/Projects/github-repositories/flink-vortex-demo/src/main/idl/taxiride.idl
* Tuesday, April 25, 2017 4:46:40 o'clock PM EDT
*/

abstract public class TaxiRideHelper
{
  private static String  _id = "IDL:vortex/flinkdemo/TaxiRide:1.0";

  public static void insert (org.omg.CORBA.Any a, vortex.flinkdemo.TaxiRide that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static vortex.flinkdemo.TaxiRide extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
          __active = true;
          org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember [9];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_longlong);
          _members0[0] = new org.omg.CORBA.StructMember (
            "rideId",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_boolean);
          _members0[1] = new org.omg.CORBA.StructMember (
            "isStart",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_longlong);
          _members0[2] = new org.omg.CORBA.StructMember (
            "startTime",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_longlong);
          _members0[3] = new org.omg.CORBA.StructMember (
            "endTime",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_float);
          _members0[4] = new org.omg.CORBA.StructMember (
            "startLon",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_float);
          _members0[5] = new org.omg.CORBA.StructMember (
            "endLon",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_float);
          _members0[6] = new org.omg.CORBA.StructMember (
            "startLat",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_float);
          _members0[7] = new org.omg.CORBA.StructMember (
            "endLat",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_short);
          _members0[8] = new org.omg.CORBA.StructMember (
            "passengerCnt",
            _tcOf_members0,
            null);
          __typeCode = org.omg.CORBA.ORB.init ().create_struct_tc (vortex.flinkdemo.TaxiRideHelper.id (), "TaxiRide", _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static vortex.flinkdemo.TaxiRide read (org.omg.CORBA.portable.InputStream istream)
  {
    vortex.flinkdemo.TaxiRide value = new vortex.flinkdemo.TaxiRide ();
    value.rideId = istream.read_longlong ();
    value.isStart = istream.read_boolean ();
    value.startTime = istream.read_longlong ();
    value.endTime = istream.read_longlong ();
    value.startLon = istream.read_float ();
    value.endLon = istream.read_float ();
    value.startLat = istream.read_float ();
    value.endLat = istream.read_float ();
    value.passengerCnt = istream.read_short ();
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, vortex.flinkdemo.TaxiRide value)
  {
    ostream.write_longlong (value.rideId);
    ostream.write_boolean (value.isStart);
    ostream.write_longlong (value.startTime);
    ostream.write_longlong (value.endTime);
    ostream.write_float (value.startLon);
    ostream.write_float (value.endLon);
    ostream.write_float (value.startLat);
    ostream.write_float (value.endLat);
    ostream.write_short (value.passengerCnt);
  }

}
